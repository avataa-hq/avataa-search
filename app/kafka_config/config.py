from .protobuf import inventory_instances_pb2
import os

KAFKA_TURN_ON = str(os.environ.get("KAFKA_TURN_ON", True)).upper() in (
    "TRUE",
    "Y",
    "YES",
    "1",
)

KAFKA_URL = os.environ.get("KAFKA_URL", "kafka:9092")
KAFKA_CONSUMER_GROUP_ID = os.environ.get("KAFKA_CONSUMER_GROUP_ID", "Search")
KAFKA_CONSUMER_OFFSET = os.environ.get("KAFKA_CONSUMER_OFFSET", "earliest")
KAFKA_SECURITY_PROTOCOL = os.environ.get(
    "KAFKA_SECURITY_PROTOCOL", "sasl_plaintext"
)
KAFKA_SASL_MECHANISMS = os.environ.get("KAFKA_SASL_MECHANISM", "OAUTHBEARER")

KAFKA_INVENTORY_CHANGES_TOPIC = os.environ.get(
    "KAFKA_INVENTORY_CHANGES_TOPIC"
)  # inventory.changes

KAFKA_ZEEBE_CHANGES_TOPIC = os.environ.get(
    "KAFKA_ZEEBE_CHANGES_TOPIC", "zeebe-process-instance-exporter"
)  # "process.changes.part"

KAFKA_ZEEBE_CONSUMER_WORKERS = os.environ.get("KAFKA_ZEEBE_CONSUMER_WORKERS", 1)

KAFKA_ZEEBE_PROCESS_INSTANCE_EXPORTER_TOPIC = os.environ.get(
    "KAFKA_ZEEBE_PROCESS_INSTANCE_EXPORTER_TOPIC"
)  # zeebe-process-instance-exporter
KAFKA_HIERARCHY_HIERARCHIES_CHANGES_TOPIC = os.environ.get(
    "KAFKA_HIERARCHY_HIERARCHIES_CHANGES_TOPIC"
)
KAFKA_HIERARCHY_LEVELS_CHANGES_TOPIC = os.environ.get(
    "KAFKA_HIERARCHY_LEVELS_CHANGES_TOPIC"
)
KAFKA_HIERARCHY_OBJ_CHANGES_TOPIC = os.environ.get(
    "KAFKA_HIERARCHY_OBJ_CHANGES_TOPIC"
)
KAFKA_HIERARCHY_NODE_DATA_CHANGES_TOPIC = os.environ.get(
    "KAFKA_HIERARCHY_NODE_DATA_CHANGES_TOPIC"
)
KAFKA_HIERARCHY_PERMISSIONS_CHANGES_TOPIC = os.environ.get(
    "KAFKA_HIERARCHY_PERMISSIONS_CHANGES_TOPIC"
)
KAFKA_HIERARCHY_CHANGES_TOPIC = os.environ.get(
    "KAFKA_HIERARCHY_CHANGES_TOPIC", "hierarchy.changes"
)

KAFKA_GROUP_BUILDER_GROUP_TOPIC = os.environ.get(
    "KAFKA_GROUP_BUILDER_GROUP_TOPIC", "group"
)

KAFKA_GROUP_STATISTIC_TOPIC = os.environ.get(
    "KAFKA_GROUP_STATISTIC_TOPIC", "group_data.changes"
)

TOPICS = os.environ.get(
    "KAFKA_SUBSCRIBE_TOPICS", "inventory.changes,process.changes"
)

KAFKA_INVENTORY_SECURITY_TOPIC = os.environ.get(
    "KAFKA_INVENTORY_SECURITY_TOPIC", "inventory.security"
)  # inventory.security

KAFKA_SUBSCRIBE_TOPICS = list()
# if KAFKA_INVENTORY_CHANGES_TOPIC:
#     KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_INVENTORY_CHANGES_TOPIC)

# if KAFKA_ZEEBE_CHANGES_TOPIC:
#     KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_ZEEBE_CHANGES_TOPIC)

if KAFKA_ZEEBE_PROCESS_INSTANCE_EXPORTER_TOPIC:
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_ZEEBE_PROCESS_INSTANCE_EXPORTER_TOPIC)

if KAFKA_HIERARCHY_HIERARCHIES_CHANGES_TOPIC:
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_HIERARCHY_HIERARCHIES_CHANGES_TOPIC)

if KAFKA_HIERARCHY_LEVELS_CHANGES_TOPIC:
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_HIERARCHY_LEVELS_CHANGES_TOPIC)

if KAFKA_HIERARCHY_OBJ_CHANGES_TOPIC:
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_HIERARCHY_OBJ_CHANGES_TOPIC)

if KAFKA_HIERARCHY_NODE_DATA_CHANGES_TOPIC:
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_HIERARCHY_NODE_DATA_CHANGES_TOPIC)

if KAFKA_HIERARCHY_PERMISSIONS_CHANGES_TOPIC:
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_HIERARCHY_PERMISSIONS_CHANGES_TOPIC)

if KAFKA_HIERARCHY_CHANGES_TOPIC and not any(
    [
        KAFKA_HIERARCHY_HIERARCHIES_CHANGES_TOPIC,
        KAFKA_HIERARCHY_LEVELS_CHANGES_TOPIC,
        KAFKA_HIERARCHY_OBJ_CHANGES_TOPIC,
        KAFKA_HIERARCHY_NODE_DATA_CHANGES_TOPIC,
        KAFKA_HIERARCHY_PERMISSIONS_CHANGES_TOPIC,
    ]
):
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_HIERARCHY_CHANGES_TOPIC)

if KAFKA_GROUP_BUILDER_GROUP_TOPIC:
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_GROUP_BUILDER_GROUP_TOPIC)

if KAFKA_GROUP_STATISTIC_TOPIC:
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_GROUP_STATISTIC_TOPIC)

if KAFKA_INVENTORY_SECURITY_TOPIC:
    KAFKA_SUBSCRIBE_TOPICS.append(KAFKA_INVENTORY_SECURITY_TOPIC)

KAFKA_KEYCLOAK_SCOPES = os.environ.get("KAFKA_KEYCLOAK_SCOPES", "profile")
KAFKA_KEYCLOAK_CLIENT_ID = os.environ.get("KAFKA_KEYCLOAK_CLIENT_ID", "kafka")
KAFKA_KEYCLOAK_SECRET = os.environ.get("KAFKA_KEYCLOAK_CLIENT_SECRET", None)
# KAFKA_KEYCLOAK_TOKEN_URL = os.environ.get("KAFKA_KEYCLOAK_TOKEN_URL")
KAFKA_SECURED = str(os.environ.get("KAFKA_SECURED", False)).upper() in (
    "TRUE",
    "Y",
    "YES",
    "1",
)

KAFKA_CONSUMER_CONNECT_CONFIG = {
    "bootstrap.servers": KAFKA_URL,
    "group.id": KAFKA_CONSUMER_GROUP_ID,
    "auto.offset.reset": KAFKA_CONSUMER_OFFSET,
    "enable.auto.commit": False,
}

if KAFKA_SECURED:
    KAFKA_CONSUMER_CONNECT_CONFIG.update(
        {
            "security.protocol": KAFKA_SECURITY_PROTOCOL,
            "sasl.mechanisms": KAFKA_SASL_MECHANISMS,
            "group.id": KAFKA_CONSUMER_GROUP_ID,
            "auto.offset.reset": KAFKA_CONSUMER_OFFSET,
            "enable.auto.commit": False,
        }
    )

KAFKA_PROTOBUF_DESERIALIZERS = {
    "MO": inventory_instances_pb2.ListMO,
    "TMO": inventory_instances_pb2.ListTMO,
    "TPRM": inventory_instances_pb2.ListTPRM,
    "PRM": inventory_instances_pb2.ListPRM,
}
