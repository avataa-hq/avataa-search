# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import grpc_group_pb2 as grpc__group__pb2


class GroupStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGroups = channel.unary_unary(
                '/grpc_group.Group/CreateGroups',
                request_serializer=grpc__group__pb2.RequestCreateGroup.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseGroupStatus.FromString,
                )
        self.DeleteGroups = channel.unary_unary(
                '/grpc_group.Group/DeleteGroups',
                request_serializer=grpc__group__pb2.RequestListGroupName.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseGroupStatus.FromString,
                )
        self.AddElementsToGroup = channel.unary_unary(
                '/grpc_group.Group/AddElementsToGroup',
                request_serializer=grpc__group__pb2.RequestElements.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseGroupStatus.FromString,
                )
        self.RemoveElementsFromGroup = channel.unary_unary(
                '/grpc_group.Group/RemoveElementsFromGroup',
                request_serializer=grpc__group__pb2.RequestElements.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseGroupStatus.FromString,
                )
        self.ExistedGroup = channel.unary_unary(
                '/grpc_group.Group/ExistedGroup',
                request_serializer=grpc__group__pb2.RequestListGroupName.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseListGroupName.FromString,
                )
        self.ListGroupWithElements = channel.unary_unary(
                '/grpc_group.Group/ListGroupWithElements',
                request_serializer=grpc__group__pb2.RequestGroupByType.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseListGroupName.FromString,
                )
        self.ListElementsInGroups = channel.unary_unary(
                '/grpc_group.Group/ListElementsInGroups',
                request_serializer=grpc__group__pb2.RequestListGroupName.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseElements.FromString,
                )
        self.ListGroupByTMOID = channel.unary_stream(
                '/grpc_group.Group/ListGroupByTMOID',
                request_serializer=grpc__group__pb2.RequestListGroupByTMOID.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseListGroupByTMOID.FromString,
                )
        self.ListMOIdsInSpecialGroup = channel.unary_stream(
                '/grpc_group.Group/ListMOIdsInSpecialGroup',
                request_serializer=grpc__group__pb2.RequestListMOIdsInSpecialGroup.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseListMOIdsInSpecialGroup.FromString,
                )
        self.GetGroupStatistic = channel.unary_unary(
                '/grpc_group.Group/GetGroupStatistic',
                request_serializer=grpc__group__pb2.RequestGetGroupStatistic.SerializeToString,
                response_deserializer=grpc__group__pb2.ResponseGetGroupStatistic.FromString,
                )


class GroupServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddElementsToGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveElementsFromGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExistedGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroupWithElements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListElementsInGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroupByTMOID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMOIdsInSpecialGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupStatistic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroups,
                    request_deserializer=grpc__group__pb2.RequestCreateGroup.FromString,
                    response_serializer=grpc__group__pb2.ResponseGroupStatus.SerializeToString,
            ),
            'DeleteGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroups,
                    request_deserializer=grpc__group__pb2.RequestListGroupName.FromString,
                    response_serializer=grpc__group__pb2.ResponseGroupStatus.SerializeToString,
            ),
            'AddElementsToGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddElementsToGroup,
                    request_deserializer=grpc__group__pb2.RequestElements.FromString,
                    response_serializer=grpc__group__pb2.ResponseGroupStatus.SerializeToString,
            ),
            'RemoveElementsFromGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveElementsFromGroup,
                    request_deserializer=grpc__group__pb2.RequestElements.FromString,
                    response_serializer=grpc__group__pb2.ResponseGroupStatus.SerializeToString,
            ),
            'ExistedGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.ExistedGroup,
                    request_deserializer=grpc__group__pb2.RequestListGroupName.FromString,
                    response_serializer=grpc__group__pb2.ResponseListGroupName.SerializeToString,
            ),
            'ListGroupWithElements': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroupWithElements,
                    request_deserializer=grpc__group__pb2.RequestGroupByType.FromString,
                    response_serializer=grpc__group__pb2.ResponseListGroupName.SerializeToString,
            ),
            'ListElementsInGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListElementsInGroups,
                    request_deserializer=grpc__group__pb2.RequestListGroupName.FromString,
                    response_serializer=grpc__group__pb2.ResponseElements.SerializeToString,
            ),
            'ListGroupByTMOID': grpc.unary_stream_rpc_method_handler(
                    servicer.ListGroupByTMOID,
                    request_deserializer=grpc__group__pb2.RequestListGroupByTMOID.FromString,
                    response_serializer=grpc__group__pb2.ResponseListGroupByTMOID.SerializeToString,
            ),
            'ListMOIdsInSpecialGroup': grpc.unary_stream_rpc_method_handler(
                    servicer.ListMOIdsInSpecialGroup,
                    request_deserializer=grpc__group__pb2.RequestListMOIdsInSpecialGroup.FromString,
                    response_serializer=grpc__group__pb2.ResponseListMOIdsInSpecialGroup.SerializeToString,
            ),
            'GetGroupStatistic': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupStatistic,
                    request_deserializer=grpc__group__pb2.RequestGetGroupStatistic.FromString,
                    response_serializer=grpc__group__pb2.ResponseGetGroupStatistic.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_group.Group', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Group(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_group.Group/CreateGroups',
            grpc__group__pb2.RequestCreateGroup.SerializeToString,
            grpc__group__pb2.ResponseGroupStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_group.Group/DeleteGroups',
            grpc__group__pb2.RequestListGroupName.SerializeToString,
            grpc__group__pb2.ResponseGroupStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddElementsToGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_group.Group/AddElementsToGroup',
            grpc__group__pb2.RequestElements.SerializeToString,
            grpc__group__pb2.ResponseGroupStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveElementsFromGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_group.Group/RemoveElementsFromGroup',
            grpc__group__pb2.RequestElements.SerializeToString,
            grpc__group__pb2.ResponseGroupStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExistedGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_group.Group/ExistedGroup',
            grpc__group__pb2.RequestListGroupName.SerializeToString,
            grpc__group__pb2.ResponseListGroupName.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGroupWithElements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_group.Group/ListGroupWithElements',
            grpc__group__pb2.RequestGroupByType.SerializeToString,
            grpc__group__pb2.ResponseListGroupName.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListElementsInGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_group.Group/ListElementsInGroups',
            grpc__group__pb2.RequestListGroupName.SerializeToString,
            grpc__group__pb2.ResponseElements.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGroupByTMOID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc_group.Group/ListGroupByTMOID',
            grpc__group__pb2.RequestListGroupByTMOID.SerializeToString,
            grpc__group__pb2.ResponseListGroupByTMOID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMOIdsInSpecialGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc_group.Group/ListMOIdsInSpecialGroup',
            grpc__group__pb2.RequestListMOIdsInSpecialGroup.SerializeToString,
            grpc__group__pb2.ResponseListMOIdsInSpecialGroup.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroupStatistic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_group.Group/GetGroupStatistic',
            grpc__group__pb2.RequestGetGroupStatistic.SerializeToString,
            grpc__group__pb2.ResponseGetGroupStatistic.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
