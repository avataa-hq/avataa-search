import os

from kafka_config.config import KAFKA_URL, KAFKA_CONSUMER_GROUP_ID

# KAFKA
KAFKA_SECURITY_OFFSET = os.environ.get("KAFKA_SECURITY_OFFSET", "latest")
KAFKA_SECURITY_TOPIC = os.environ.get(
    "KAFKA_SECURITY_TOPIC", "inventory.security"
)
KAFKA_CONSUMER_CONNECT_CONFIG = {
    "bootstrap.servers": KAFKA_URL,
    "security.protocol": "sasl_plaintext",
    "sasl.mechanisms": "OAUTHBEARER",
    "group.id": KAFKA_CONSUMER_GROUP_ID,
    "auto.offset.reset": KAFKA_SECURITY_OFFSET,
    "enable.auto.commit": False,
}


# KEYCLOAK
KEYCLOAK_PROTOCOL = os.environ.get("KEYCLOAK_PROTOCOL", "http")
KEYCLOAK_HOST = os.environ.get("KEYCLOAK_HOST", "keycloak")
KEYCLOAK_PORT = os.environ.get("KEYCLOAK_PORT", "8080")
KEYCLOAK_REDIRECT_PROTOCOL = os.environ.get("KEYCLOAK_REDIRECT_PROTOCOL", None)
KEYCLOAK_REDIRECT_HOST = os.environ.get("KEYCLOAK_REDIRECT_HOST", None)
KEYCLOAK_REDIRECT_PORT = os.environ.get("KEYCLOAK_REDIRECT_PORT", None)
KEYCLOAK_REALM = os.environ.get("KEYCLOAK_REALM", "avataa")
KEYCLOAK_CLIENT_ID = os.environ.get("KEYCLOAK_CLIENT_ID", "web")
KEYCLOAK_CLIENT_SECRET = os.environ.get("KEYCLOAK_CLIENT_SECRET", None)

if KEYCLOAK_REDIRECT_PROTOCOL is None:
    KEYCLOAK_REDIRECT_PROTOCOL = KEYCLOAK_PROTOCOL
if KEYCLOAK_REDIRECT_HOST is None:
    KEYCLOAK_REDIRECT_HOST = KEYCLOAK_HOST
if KEYCLOAK_REDIRECT_PORT is None:
    KEYCLOAK_REDIRECT_PORT = KEYCLOAK_PORT

KEYCLOAK_URL = f"{KEYCLOAK_PROTOCOL}://{KEYCLOAK_HOST}"
if KEYCLOAK_PORT:
    KEYCLOAK_URL += f":{KEYCLOAK_PORT}"
KEYCLOAK_PUBLIC_KEY_URL = f"{KEYCLOAK_URL}/realms/{KEYCLOAK_REALM}"
KEYCLOAK_REDIRECT_URL = (
    f"{KEYCLOAK_REDIRECT_PROTOCOL}://{KEYCLOAK_REDIRECT_HOST}"
)
if KEYCLOAK_REDIRECT_PORT:
    KEYCLOAK_REDIRECT_URL += f":{KEYCLOAK_REDIRECT_PORT}"
KEYCLOAK_TOKEN_URL = f"{KEYCLOAK_REDIRECT_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/token"
KEYCLOAK_AUTHORIZATION_URL = f"{KEYCLOAK_REDIRECT_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/auth"


# OPA
OPA_PROTOCOL = os.environ.get("OPA_PROTOCOL", "http")
OPA_HOST = os.environ.get("OPA_HOST", "opa")
OPA_PORT = os.environ.get("OPA_PORT", "8181")
OPA_POLICY = os.environ.get("OPA_POLICY", "main")

OPA_URL = f"{OPA_PROTOCOL}://{OPA_HOST}:{OPA_PORT}"
OPA_POLICY_PATH = f"/v1/data/{OPA_POLICY}"


# OTHER
SECURITY_TYPE = os.environ.get("SECURITY_TYPE", "KEYCLOAK-INFO").upper()
ADMIN_ROLE = "__admin"


# CACHE
SECURITY_MIDDLEWARE_PROTOCOL = os.environ.get(
    "SECURITY_MIDDLEWARE_PROTOCOL", "http"
)
SECURITY_MIDDLEWARE_HOST = os.environ.get(
    "SECURITY_MIDDLEWARE_HOST", "security-middleware"
)
SECURITY_MIDDLEWARE_PORT = os.environ.get("SECURITY_MIDDLEWARE_PORT", "8000")
if (
    SECURITY_MIDDLEWARE_HOST == KEYCLOAK_HOST
    and SECURITY_MIDDLEWARE_PORT == KEYCLOAK_PORT
):
    SECURITY_POSTFIX = (
        f"/realms/{KEYCLOAK_REALM}/protocol/openid-connect/userinfo"
    )
else:
    SECURITY_POSTFIX = f"/api/security_middleware/v1/cached/realms/{KEYCLOAK_REALM}/protocol/openid-connect/userinfo"
SECURITY_MIDDLEWARE_URL = f"{SECURITY_MIDDLEWARE_PROTOCOL}://{SECURITY_MIDDLEWARE_HOST}:{SECURITY_MIDDLEWARE_PORT}{SECURITY_POSTFIX}"
