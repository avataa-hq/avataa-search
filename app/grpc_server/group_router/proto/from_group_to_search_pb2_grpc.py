# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import from_group_to_search_pb2 as from__group__to__search__pb2


class GroupSearchStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProcesses = channel.unary_stream(
                '/group_search.GroupSearch/GetProcesses',
                request_serializer=from__group__to__search__pb2.RequestGetProcesses.SerializeToString,
                response_deserializer=from__group__to__search__pb2.ResponseGetProcesses.FromString,
                )
        self.GetProcessesGroups = channel.unary_stream(
                '/group_search.GroupSearch/GetProcessesGroups',
                request_serializer=from__group__to__search__pb2.RequestGetProcessesGroups.SerializeToString,
                response_deserializer=from__group__to__search__pb2.ResponseProcessesGroups.FromString,
                )
        self.GetMOsByFilters = channel.unary_stream(
                '/group_search.GroupSearch/GetMOsByFilters',
                request_serializer=from__group__to__search__pb2.RequestGetMOsByFilters.SerializeToString,
                response_deserializer=from__group__to__search__pb2.ResponseGetMOsByFilters.FromString,
                )


class GroupSearchServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProcesses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProcessesGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMOsByFilters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupSearchServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProcesses': grpc.unary_stream_rpc_method_handler(
                    servicer.GetProcesses,
                    request_deserializer=from__group__to__search__pb2.RequestGetProcesses.FromString,
                    response_serializer=from__group__to__search__pb2.ResponseGetProcesses.SerializeToString,
            ),
            'GetProcessesGroups': grpc.unary_stream_rpc_method_handler(
                    servicer.GetProcessesGroups,
                    request_deserializer=from__group__to__search__pb2.RequestGetProcessesGroups.FromString,
                    response_serializer=from__group__to__search__pb2.ResponseProcessesGroups.SerializeToString,
            ),
            'GetMOsByFilters': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMOsByFilters,
                    request_deserializer=from__group__to__search__pb2.RequestGetMOsByFilters.FromString,
                    response_serializer=from__group__to__search__pb2.ResponseGetMOsByFilters.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'group_search.GroupSearch', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GroupSearch(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProcesses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/group_search.GroupSearch/GetProcesses',
            from__group__to__search__pb2.RequestGetProcesses.SerializeToString,
            from__group__to__search__pb2.ResponseGetProcesses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProcessesGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/group_search.GroupSearch/GetProcessesGroups',
            from__group__to__search__pb2.RequestGetProcessesGroups.SerializeToString,
            from__group__to__search__pb2.ResponseProcessesGroups.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMOsByFilters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/group_search.GroupSearch/GetMOsByFilters',
            from__group__to__search__pb2.RequestGetMOsByFilters.SerializeToString,
            from__group__to__search__pb2.ResponseGetMOsByFilters.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
